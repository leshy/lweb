// Generated by CoffeeScript 1.4.0
(function() {
  var Channel, helpers, io, lweb, shared, _,
    __slice = [].slice;

  io = require('socket.io-browserify');

  helpers = require('helpers');

  _ = require('underscore');

  _.extend(exports, shared = require('./shared'));

  Channel = exports.Channel = shared.channelInterface.extend4000({
    initialize: function() {
      var _this = this;
      this.name = this.get('name' || (function() {
        throw 'channel needs a name';
      })());
      this.socket = this.get('lweb').socket || (function() {
        throw 'channel needs lweb';
      })();
      this.socket.emit('subscribe', {
        channel: channel
      });
      return this.socket.on(channel, function() {
        return _this.emit(message);
      });
    },
    send: function() {}
  });

  lweb = exports.lweb = shared.lwebInterface.extend4000(ChannelClient, {
    connect: function(host) {
      if (host == null) {
        host = "http://" + window.location.host;
      }
      return this.socket = io.connect(host);
    },
    once: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.socket.once.apply(this.socket, args);
    },
    on: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.socket.on.apply(this.socket, args);
    },
    emit: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.socket.once.apply(this.socket, args);
    },
    subscribe: function(channelname) {
      return new Channel({
        lweb: this,
        name: channelname
      });
    }
  });

}).call(this);
