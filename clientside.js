// Generated by CoffeeScript 1.4.0
(function() {
  var Backbone, Channel, ChannelClient, helpers, io, lweb, shared, _;

  Backbone = require('backbone4000');

  io = require('socket.io-browserify');

  helpers = require('helpers');

  _ = require('underscore');

  _.extend(exports, shared = require('./shared'));

  Channel = exports.Channel = shared.SubscriptionMan2.extend4000({
    initialize: function() {
      var _this = this;
      this.name = this.get('name' || (function() {
        throw 'channel needs a name';
      })());
      this.socket = this.get('lweb').socket || (function() {
        throw 'channel needs lweb';
      })();
      this.socket.emit('join', {
        channel: this.name
      });
      return this.socket.on(this.name, function(msg) {
        return _this.event(msg);
      });
    },
    part: function() {
      this.socket.emit('part', {
        channel: this.name
      });
      return this.trigger('del');
    },
    del: function() {
      return this.part();
    }
  });

  ChannelClient = Backbone.Model.extend4000({
    initialize: function() {
      return this.channels = {};
    },
    channel: function(channelname) {
      var channel,
        _this = this;
      if (channel = this.channels[channelname]) {
        return channel;
      }
      channel = this.channels[channelname] = new Channel({
        lweb: this,
        name: channelname
      });
      channel.on('del', function() {
        return delete _this.channels[channelname];
      });
      return channel;
    }
  });

  lweb = exports.lweb = ChannelClient.extend4000(shared.queryClient, shared.queryServer, {
    initialize: function() {
      return window.lweb = this;
    },
    connect: function(host) {
      var _this = this;
      if (host == null) {
        host = "http://" + window.location.host;
      }
      this.socket = io.connect(host);
      this.socket.on('query', function(msg) {
        return _this.queryReceive(msg, _this.socket);
      });
      return this.socket.on('reply', function(msg) {
        return _this.queryReplyReceive(msg, _this.socket);
      });
    }
  });

}).call(this);
