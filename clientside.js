// Generated by CoffeeScript 1.4.0
(function() {
  var Backbone, Channel, ChannelClient, collections, helpers, io, lweb, shared, _;

  Backbone = require('backbone4000');

  io = require('socket.io-browserify');

  helpers = require('helpers');

  _ = require('underscore');

  _.extend(exports, shared = require('./shared'));

  _.extend(exports, collections = require('./remotecollections/clientside.coffee'));

  Channel = exports.Channel = shared.SubscriptionMan2.extend4000({
    initialize: function() {
      var _this = this;
      this.name = this.get('name' || (function() {
        throw 'channel needs a name';
      })());
      this.socket = this.get('lweb').socket || (function() {
        throw 'channel needs lweb';
      })();
      this.socket.emit('join', {
        channel: this.name
      });
      return this.socket.on(this.name, function(msg) {
        return _this.event(msg);
      });
    },
    part: function() {
      this.socket.emit('part', {
        channel: this.name
      });
      return this.trigger('del');
    },
    del: function() {
      return this.part();
    }
  });

  ChannelClient = shared.channelInterface.extend4000({});

  lweb = exports.lweb = ChannelClient.extend4000(shared.queryClient, shared.queryServer, {
    initialize: function() {
      var _this = this;
      window.lweb = this;
      this.socket = io.connect(this.get('host') || "http://" + window.location.host);
      this.socket.on('query', function(msg) {
        return _this.queryReceive(msg, _this.socket);
      });
      return this.socket.on('reply', function(msg) {
        return _this.queryReplyReceive(msg, _this.socket);
      });
    },
    collection: function(name) {
      return new exports.RemoteCollection({
        lweb: this,
        name: name
      });
    }
  });

}).call(this);
