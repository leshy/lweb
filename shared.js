// Generated by CoffeeScript 1.4.0
(function() {
  var Backbone, Response, SimpleMatcher, SubscriptionMan2, channelInterface, helpers, queryClient, queryServer, _,
    __slice = [].slice;

  Backbone = require('backbone4000');

  _ = require('underscore');

  helpers = require('helpers');

  SimpleMatcher = Backbone.Model.extend4000({
    match: function(value, pattern) {
      if (pattern === true) {
        return true;
      }
      return !_.find(pattern, function(checkvalue, key) {
        if (!value[key]) {
          return true;
        }
        if (checkvalue !== true && value[key] !== checkvalue) {
          return true;
        }
        return false;
      });
    }
  });

  SubscriptionMan2 = exports.SubscriptionMan2 = SimpleMatcher.extend4000({
    initialize: function() {
      return this.subscriptions = [];
    },
    subscribe: function(pattern, callback, name) {
      if (!callback && pattern.constructor === Function) {
        callback = pattern;
        pattern = true;
      }
      return this.subscriptions.push({
        pattern: pattern,
        callback: callback
      });
    },
    event: function() {
      var subscriptions, value, values,
        _this = this;
      values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      value = _.first(values);
      subscriptions = _.filter(this.subscriptions, function(subscription) {
        return _this.match(value, subscription.pattern);
      });
      return _.map(subscriptions, function(subscription) {
        return subscription.callback.apply(this, values);
      });
    }
  });

  channelInterface = exports.channelInterface = Backbone.Model.extend4000({
    broadcast: function(channel, message) {
      return true;
    },
    join: function(channel, listener) {
      return true;
    },
    part: function(channel, listener) {
      return true;
    },
    del: function() {
      return true;
    }
  });

  Response = (function() {

    function Response(id, client) {
      this.id = id;
      this.client = client;
    }

    Response.prototype.makereply = function(payload, end) {
      var msg;
      if (this.ended) {
        throw 'reply already ended';
      }
      msg = {};
      msg.id = this.id;
      if (payload) {
        msg.payload = payload;
      }
      if (end) {
        msg.end = true;
      }
      console.log("EMMITING REPLY", msg);
      return msg;
    };

    Response.prototype.write = function(payload) {
      return this.client.emit('reply', this.makereply(payload));
    };

    Response.prototype.end = function(payload) {
      this.client.emit('reply', this.makereply(payload, true));
      return this.ended = true;
    };

    return Response;

  })();

  queryClient = exports.queryClient = Backbone.Model.extend4000({
    initialize: function() {
      return this.queries = [];
    },
    queryReplyReceive: function(msg) {
      var callback;
      callback = this.queries[msg.id];
      callback(msg.payload);
      if (msg.end) {
        return delete this.queries[msg.id];
      }
    },
    query: function(msg, callback) {
      var id;
      id = helpers.uuid(10);
      this.queries[id] = callback;
      console.log('emitting query!');
      return this.socket.emit('query', {
        id: id,
        payload: msg
      });
    }
  });

  queryServer = exports.queryServer = SubscriptionMan2.extend4000({
    queryReceive: function(msg, client) {
      console.log("RECEIVE QUERY PRELIMINARY", msg);
      if (!msg.payload || !msg.id) {
        return console.warn('invalid query message received:', msg);
      }
      return this.event(msg.payload, msg.id, client);
    },
    subscribe: function(pattern, callback) {
      var wrapped;
      if (!callback && pattern.constructor === Function) {
        callback = pattern && (pattern = true);
      }
      wrapped = function(msg, id, client) {
        return callback(msg, new Response(id, client));
      };
      return SubscriptionMan2.prototype.subscribe.call(this, pattern, wrapped);
    }
  });

}).call(this);
