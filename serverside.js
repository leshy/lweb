// Generated by CoffeeScript 1.4.0
(function() {
  var Backbone, ChannelServer, SubscriptionMan, WebsocketServer, helpers, io, _;

  io = require('socket.io');

  Backbone = require('backbone4000');

  SubscriptionMan = require('subscriptionman').SubscriptionMan;

  helpers = require('helpers');

  _ = require('underscore');

  _.extend(exports, require('./shared'));

  ChannelServer = Backbone.Model.extend4000({
    initialize: function() {
      return this.channels = {};
    },
    broadcast: function(channel, message) {
      if (!(channel = this.channels[channel])) {
        return;
      }
      return _.map(channel, function(listener) {
        return listener(message);
      });
    },
    subscribe: function(channel, listener) {
      var _this = this;
      if (!(channel = this.channels[channel])) {
        this.channels[channel] = [];
      }
      this.channels[channel].push(listener);
      return function() {
        return _this.unsubscribe(channel, listener);
      };
    },
    unsubscribe: function(channel, listener) {
      if (!(channel = this.channels[channel])) {
        return;
      }
      return helpers.remove(this.channels[channel], listener);
    }
  });

  WebsocketServer = exports.WebsocketServer = Backbone.Model.extend4000({
    initialize: function() {
      var server;
      server = io.listen(this.get('http'), this.get('options'));
      return server.on('connection', function(socket) {
        console.log('received connection');
        socket.once('login', function(msg) {
          console.log('login', msg);
          socket.emit('login', {
            user: {
              secret: 'somesecret',
              name: 'perica'
            }
          });
          return socket.on('msg', function(msg) {
            return console.log('msg', JSON.stringify(msg));
          });
        });
        return true;
      });
    }
  });

}).call(this);
