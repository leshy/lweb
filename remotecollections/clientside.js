// Generated by CoffeeScript 1.4.0
(function() {
  var Backbone, RemoteCollection, Select, Validator, collections, msgCallback, v;

  Validator = require('validator2-extras');

  v = Validator.v;

  Select = Validator.Select;

  Backbone = require('backbone4000');

  collections = require('collections');

  msgCallback = function(callback) {
    return function(msg, end) {
      if (!callback) {
        return;
      }
      if (end) {
        return callback(msg.err, msg.data);
      }
    };
  };

  RemoteCollection = exports.RemoteCollection = Backbone.Model.extend4000(collections.ModelMixin, collections.ReferenceMixin, Validator.ValidatedModel, {
    validator: v({
      name: "String",
      lweb: "Instance"
    }),
    initialize: function() {
      this.lweb = this.get('lweb');
      return this.name = this.get('name');
    },
    create: function(entry, callback) {
      return this.lweb.query({
        collection: this.name,
        create: entry
      }, msgCallback(callback));
    },
    remove: function(pattern, callback) {
      return this.lweb.query({
        collection: this.name,
        remove: pattern,
        raw: true
      }, msgCallback(callback));
    },
    update: function(pattern, data, callback) {
      return this.lweb.query({
        collection: this.get('name'),
        update: pattern,
        data: data,
        raw: true
      }, msgCallback(callback));
    },
    find: function(pattern, limits, callback) {
      return this.lweb.query({
        collection: this.get('name'),
        find: pattern,
        limits: limits
      }, function(msg, end) {
        if (msg) {
          callback(msg.data);
        }
        if (end) {
          return callback();
        }
      });
    },
    findOne: function(pattern, callback) {
      return this.lweb.query({
        collection: this.get('name'),
        findOne: pattern
      }, function(msg, end) {
        if (msg) {
          return callback(void 0, msg.data);
        } else {
          return callback("not found");
        }
      });
    },
    fcall: function(name, args, pattern, callback) {
      return this.lweb.query({
        collection: this.get('name'),
        call: name,
        args: args,
        data: pattern
      }, function(msg, end) {
        return helpers.cbc(callback, msg.err, msg.data);
      });
    }
  });

}).call(this);
